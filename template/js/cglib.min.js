;(function($){
	$.fn.cgCarousel = function(o) {
        o = $.extend({
            btnPrev: null,
            btnNext: null,
            btnGo: null,
            mouseWheel: false,
            onMouse: true,
            auto: 800,
            speed:1000,
			range:100,
            easing: null,
            vertical: false,//横向滚动或纵向滚动
            circular: true,
            visible: 4,//可显示数量
            start: 0,
            scroll: 1,
            beforeStart: null,
            afterEnd: null,
			type:null//ceaseless为不间断滚动，null表示间隔滚动
        },o || {});
		if(!o.type){
			var css=function(a, b) {
				return parseInt($.css(a[0], b)) || 0
			};
			var width=function(a) {//获取一个元素的宽度，包含margin值
				return a[0].offsetWidth + css(a, 'marginLeft') + css(a, 'marginRight')
			};
			var height=function(a) {//获取一个元素的高度，包含margin值
				return a[0].offsetHeight + css(a, 'marginTop') + css(a, 'marginBottom')
			}
			return this.each(function() {
				var b = false,
				animCss = o.vertical ? "top": "left",
				sizeCss = o.vertical ? "height": "width";
				var c = $(this),
				ul = $("ul", c),//获取ul节点
				tLi = $("li", ul),//获取ul节点下的li节点
				tl = tLi.size(),//ul节点下的li节点个数，原来li节点个数
				v = o.visible;
				var TimeID = 0;
				if (o.circular) {//是否可循环滚动
					ul.prepend(tLi.slice(tl - v).clone()).append(tLi.slice(0, v).clone());
					o.start += v
				}
				var f = $("li", ul),//重新获取ul中li子元素
				itemLength = f.size(),
				curr = o.start;//设置开始滚动元素位置
				c.css("visibility", "visible");
				f.css({
					overflow: "hidden",
					float: o.vertical ? "none": "left"//如果横向滚动则设置li float
				});
				ul.css({//为ul设置属性，去掉默认样式，设置z-index，位于父元素下一层
					margin: "0",
					padding: "0",
					position: "relative",
					"list-style-type": "none",
					"z-index": "1"
				});
				c.css({//为ul设置属性，去掉默认样式，设置z-index，位于子元素ul上一层，挡住ul的宽度，只显示父元素宽度
					overflow: "hidden",
					position: "relative",
					"z-index": "2",
					left: "0px"
				});
				var g = o.vertical ? height(f) : width(f);//vertical为true标识向上滚动，false则为向左滚动
				var h = g * itemLength;//获取到所有元素大小
				var j = g * v;//获取到可视区域大小
				/*f.css({
					width: f.width(),
					height: f.height()
				});*/
				//设置ul的高度或宽度，并初始化top或left
				ul.css(sizeCss, h + "px").css(animCss, -(curr * g));
				//c.css(sizeCss, j + "px");//设置div可视区域大小
				if (o.btnPrev) $(o.btnPrev).click(function() {//注册按钮事件，上一个与下一个按钮
					return go(curr - o.scroll)
				});
				if (o.btnNext) $(o.btnNext).click(function() {
					return go(curr + o.scroll)
				});
				if (o.btnGo) $.each(o.btnGo,function(i, a) {//自定义滚动位置，例如图片缩略图的单击 
					$(a).click(function() {
						return go(o.circular ? o.visible + i: i)
					})
				});
				if (o.mouseWheel && c.mousewheel) c.mousewheel(function(e, d) {//鼠标轮滑是否可控制图片滚动
					return d > 0 ? go(curr - o.scroll) : go(curr + o.scroll)
				});
				if (o.auto) TimeID = setInterval(function() {//如果图片可自动滚动，则让图片进行自动滚动，通过setInterval函数
					go(curr + o.scroll);	
				},o.auto + o.speed);
				if (o.onMouse) {//注册mouseover与mouseout事件，当鼠标移动到ul标签上时，则去掉图片自动滚动；当鼠标移出ul标签时则重新让图片自动滚动
					ul.bind("mouseover", function() {
						if (o.auto) {
							clearInterval(TimeID);
						}
					}),
					ul.bind("mouseout",function() {
						if (o.auto) {
							TimeID = setInterval(function() {
								go(curr + o.scroll);
							},o.auto + o.speed);
						}
					})
				}
				function vis() {
					return f.slice(curr).slice(0, v)
				};
				function go(a) {//核心代码，滚动函数
					if (!b) {
						if (o.beforeStart) o.beforeStart.call(this, vis());
						if (o.circular) {
							if (a <= o.start - v - 1) {
								ul.css(animCss, -((itemLength - (v * 2)) * g) + "px");
								curr = a == o.start - v - 1 ? itemLength - (v * 2) - 1: itemLength - (v * 2) - o.scroll
							} else if (a >= itemLength - v + 1) {
								ul.css(animCss, -((v) * g) + "px");
								curr = a == itemLength - v + 1 ? v + 1: v + o.scroll
							} else curr = a
						} else { 
							if (a < 0 || a > itemLength - v) return;
							else curr = a
						}
						b = true;
						
						ul.stop().animate(animCss == "left" ? {
							left: -(curr * g)
						}: {
							top: -(curr * g)
						},
						o.speed, o.easing, 
						function() {
							if (o.afterEnd) o.afterEnd.call(this, vis());
							b = false
						});
						if (!o.circular) {
							$(o.btnPrev + "," + o.btnNext).removeClass("disabled");
							$((curr - o.scroll < 0 && o.btnPrev) || (curr + o.scroll > itemLength - v && o.btnNext) || []).addClass("disabled");
						}
					}
					return false
				}
			});
		}else if(o.type=="ceaseless"){
			this.each(function(index){
				var $this=$(this),ulWidth=0,ulHeight=0,timer;
				var firstUl=$("ul",$(this)),
				lis=$("li",firstUl),
				width=$this.width(),
				height=$this.height(),
				num=2;
				$this.css({"overflow":"hidden"});
				if(o.vertical){
					num=parseInt(height/(lis.length*lis.eq(0).outerHeight(true)))+1;
					lis.each(function(){			
						ulHeight+=parseInt($(this).outerHeight(true));
					});
					firstUl.height((num+1)*ulHeight);
					$this.css("height",height);
				}else{
					lis.css({"float":"left"});
					num=parseInt(width/(lis.length*lis.eq(0).outerWidth(true)))+1;
					lis.each(function(){			
						ulWidth+=parseInt($(this).outerWidth(true));
					});
					firstUl.width((num+1)*ulWidth+10);
					$this.css("width",width);
				}				
				var cloneLis=firstUl.children("li").clone();
				for(var i=0;i<num;i++){					
					cloneLis.clone().appendTo(firstUl);
				}
				var scroll=function(){
					if(o.vertical){
						timer=setInterval(function(){
							$this.animate({
								"scrollTop":"+="+1
							},0);
							var top=$this.scrollTop();
							if(top+height>=(num+1)*ulHeight){
								$this.scrollTop(top-ulHeight);
							}							
						},o.speed);				
					}else{
						timer=setInterval(function(){
							$this.animate({
								"scrollLeft":"+="+1
							},0);
							var left=$this.scrollLeft();
							if(left+width>=(num+1)*ulWidth){								
								$this.scrollLeft(left-ulWidth);								
							}							
						},o.speed);						
					}
				}
				scroll();
				if(o.onMouse){
					$this.hover(function(){
						clearInterval(timer);
					},function(){
						scroll();
					});
				}
			})
		}
    };
	$.fn.cgMenu = function (options) {
		$.cgMenu = {
			defaults : {
				ulWidth : 'auto',
				absoluteTop : null,
				absoluteLeft : 0,
				effects : {
					effectSpeedOpen : 350,
					effectSpeedClose : 350,
					effectTypeOpen : 'fade',
					effectTypeClose : 'fade',
					effectOpen : 'swing',
					effectClose : 'swing'
				},
				TimeBeforeOpening : 50,
				TimeBeforeClosing : 100,
				animatedText : false,
				paddingLeft : 7,
				openClick : false
			},
			init : function (options) {
				opts = $.extend({},$.cgMenu.defaults, options);//合并默认参数与提交过来的参数
				$(opts.id).children("li").children("a").addClass("fNiv");
				if(!opts.absoluteTop){
					opts.absoluteTop=$(opts.id).children("li").outerHeight(true);
				}
				$(opts.id+" a:not(.fNiv)").each(function () {//获取所有不是一级菜单的链接
					var $thisChild = $(this);//将当前对象赋值给$thischild
					
					/* Add css - arrow right */
					if ($.cgMenu._IsParent($thisChild))//如果该节点具有子元素则将其加上isParent类
						$thisChild.addClass('isParent');
					
					/* Add the animation on hover **/
					if (opts.animatedText)//如果设置文字可以滚动，则会出现当鼠标移至该链接时，文字从左向右滚动
						$.cgMenu._animateText($thisChild);
					
					/* Actions on hover */
					if (!opts.openClick)//如果openClick为true时，表示展开下拉菜单的方式为click；false则为mouseover
						$thisChild.bind({
							mouseover : function () {
								$.cgMenu._hide($thisChild);
								$.cgMenu._showNextChild($thisChild);
							}
						});
					else
						$thisChild.bind({
							click : function () {
								$.cgMenu._hide($thisChild);
								$.cgMenu._showNextChild($thisChild);
							}
						});
				});
				
				/* Actions on parents links */
				if (!opts.openClick)//如果打开下拉菜单方式不是click时，则执行下面代码
					$(opts.id+' li a.fNiv').bind({//注册mouseover事件
						mouseover : function () {
							var $this = $(this);//将当前节点赋值为$this
							var $child = $this.next();//获取当前节点的子节点
							ULWidth = $.cgMenu._returnUlWidth($this);//获取到当前节点下一个ul的宽度
							$.cgMenu._closeList($(opts.id+" ul"));
							if ($child.is(':hidden'))
								$.cgMenu._showFirstChild($this);
						}
					});
				else//如果打开方式为click则执行如下代码
					$(opts.id+' li a.fNiv').bind({
						click : function (e) {// 注册click事件
							e.preventDefault();//阻止默认事件
							var $this = $(this);
							var $child = $this.next();
							ULWidth = $.cgMenu._returnUlWidth($this);
							$.cgMenu._closeList($(opts.id+" ul"));
							if ($child.is(':hidden'))
								$.cgMenu._showFirstChild($this);
						}
					});
				/* Close all when mouse  leaves */
				$(opts.id).bind({//注册mouseleave事件
					mouseleave : function () {
						setTimeout(function () {//延时处理
							$.cgMenu._closeAll();//关闭掉所有下拉菜单
						}, opts.TimeBeforeClosing);
					}
				});
			},
			/** Show the First Child Lists **/
			_showFirstChild : function (el) {
				if ($.cgMenu._IsParent(el)) {//判断当前节点是否有子元素
					var SecondList = el.next();//获取到当前节点的子节点
					if (SecondList.is(":hidden")) {
						var position = el.position();
						SecondList.css({
							top : position.top + opts.absoluteTop,
							left : position.left + opts.absoluteLeft,
							width:ULWidth
						});
						$.cgMenu._show(SecondList);
					}
				} else
					return false;
			},
			
			/** Show all others Child lists except the first list **/
			_showNextChild : function (el) {//显示下拉菜单，非一级菜单都调用这个函数				
				if ($.cgMenu._IsParent(el)) {//判断是否具有子节点，el表示a链接
					var UL_Width = el.outerWidth(true);
					ULWidth = $.cgMenu._returnUlWidth(el);
					var ChildList = el.next();
					if (ChildList.is(":hidden")) {
						var position = el.position();
						ChildList.children("li").css({
							width : ULWidth
						});
						ChildList.css({
							top : position.top,
							left : position.left + UL_Width
						}).mouseleave(function(){
							$.cgMenu._closeList(ChildList);
						});
						$.cgMenu._show(ChildList);
					}
				} else
					return false;
			},
			
			/**************************************/
			/** Short Methods - Generals actions **/
			/**************************************/
			_hide : function (el) {
				if ($.cgMenu._IsParent(el) && !el.next().is(':hidden'))//如果el为父节点，并且子节点未隐藏，则将子节点进行隐藏
					$.cgMenu._closeList(el.next());
				else if (($.cgMenu._IsParent(el) && el.next().is(':hidden')) || !$.cgMenu._IsParent(el))
					$.cgMenu._closeList(el.parent().parent().find('ul'));
				else
					return false;
			},
			
			_show : function (el) {
				switch (opts.effects.effectTypeOpen) {//打开下拉菜单，有延迟效果
				case 'slide':
					el.stop(true, true).delay(opts.TimeBeforeOpening).slideDown(opts.effects.effectSpeedOpen, opts.effects.effectOpen);
					break;
				case 'fade':
					el.stop(true, true).delay(opts.TimeBeforeOpening).fadeIn(opts.effects.effectSpeedOpen, opts.effects.effectOpen);
					break;
				default:
					el.stop(true, true).delay(opts.TimeBeforeOpening).show();
				}
			},
			
			_closeList : function (el) {//关闭下拉菜单
				switch (opts.effects.effectTypeClose) {
				case 'slide':
					el.stop(true, true).slideUp(opts.effects.effectSpeedClose, opts.effects.effectClose);
					break;
				case 'fade':
					el.stop(true, true).fadeOut(opts.effects.effectSpeedClose, opts.effects.effectClose);
					break;
				default:
					el.hide();
				}
				
			},
			
			_closeAll : function () {//当鼠标移出导航栏时，关闭掉所有下拉菜单
				//if(!$(opts.id).isHovered()) {
					$(opts.id+' ul').each(function () {
						$.cgMenu._closeList($(this));
					});
				//}
			},
			
			_IsParent : function (el) {//判断节点元素是不是具有子节点，通过查找子节点是否具有ul进行判断
				if (el.next().is('ul'))
					return true;
				else
					return false;
			},
			
			_returnUlWidth : function (el) {//返回元素的宽度，如果为auto则返回元素的实际的宽度，如果为固定值则为设定为固定值
				switch (opts.ulWidth) {
				case "auto":
					ULWidth = parseInt(el.next().outerWidth(true));
					break;
				default:
					ULWidth = parseInt(opts.ulWidth);
				}
				return ULWidth;
			},
			
			_animateText : function (el) {//滚动文本
				var paddingInit = parseInt(el.css('padding-left'));
				el.hover(function () {
					$(this)
					.stop(true, true)
					.animate({
						paddingLeft : paddingInit + opts.paddingLeft
					}, 100);
				}, function () {
					$(this)
					.stop(true, true)
					.animate({
						paddingLeft : paddingInit
					}, 100);
				});
			}
		};
		var id="#"+$(this).attr("id");
		opts=$.extend({"id":id},options);
		$.cgMenu.init(opts);
	};
	$.fn.cgPicEffect=function(opts){
		var o=$.extend(true,{},{
			big:null,//大图
			small:null,//缩略图
			title:null,//标题
			pre:null,//前一个
			next:null,//下一个
			stop:null,
			start:null,
			btnDisableClass:null,//上一个与下一个无法点击时样式
			current:0,
			circular:false,// 是否循环滚动
			bigEffect:{//大图变换效果
				type:"slide",//变换类型可取值fade/fadein/slide/sameDirectSlide，当取值不为这四个值时，调用自定义typeFun函数
				speed:300,//变换速度
				typeFun:function(obj,o){},//可自定义变换函数
				mouseover:function(obj,o){},//鼠标移到大图上触发函数
				mouseout:function(obj,o){}//鼠标移开大图触发函数
			},
			smallEffect:{//缩略图变换效果
				style:"image",//缩略图显示形式，可取值image/icon
				type:"fade",//缩略图变换效果，可取值fade
				opacity:0.6,
				speed:200,//变换速度
				typeFun:function(obj,o){},//自定义变换函数
				hoverClass:null,//为当前图时具有的样式
				onMouse:true,//为true时，mouseover触发事件，false，click触发事件
				mouseover:function(obj,o){},//鼠标移到缩略图上触发函数
				mouseout:function(obj,o){}//鼠标移开缩略图触发函数
			},
			titleEffect:{//标题变换效果
				type:"fade",//变换类型，可取值为fade/slide
				speed:400,//变换速度
				cut:40,//截取字符数，未将中文字符与英文字符进行区分
				typeFun:function(obj,o){}//自定义变换类型
			},
			init:function(){
				
			},
			auto:2500,//自动变换时等待事件，为null时，不进行自动变换
			before:function(obj,o){
			},//每次变换之前回调函数
			after:function(obj,o){
			}//每次变换结束时的回调函数
		},opts);//所有参数均在o对象中
		return $(this).each(function(){			
			var obj={};
			var $this=$(this);
			var maxTime=Math.max(o.smallEffect.speed,o.titleEffect.speed,o.bigEffect.speed);
			var changePic=function(index){
				if(obj.flag){
					obj.index=index;
					if(obj.current!=obj.index){
						if(typeof o.before =="function"){ var result=o.before(obj,o); if(result==false) return;}
						smallEffect(obj.index);
						disableBtn(obj.index);
						setTimeout(function(){
							obj.current=obj.index;
							if(typeof o.after =="function"){ o.after(obj,o);}
							obj.flag=true;							
						},maxTime);
					}
				}
			}
			var bigEffect=function(index){				
				if(o.bigEffect.type=="fade"){
					var current=obj.bigLis.eq(obj.current);
					obj.bigLis.not(current).hide();
					current.stop(true,true).fadeOut(o.bigEffect.speed);
					obj.bigLis.eq(index).stop(true,true).fadeIn(o.bigEffect.speed);					
				}else if(o.bigEffect.type=="fadein"){
					obj.bigLis.hide();
					obj.bigLis.eq(index).stop(true).fadeIn(o.bigEffect.speed);
				}else if(o.bigEffect.type=="slide"){
					var liWidth=obj.bigLis.eq(0).outerWidth(true);
					var ulWidth=obj.bigLis.eq(0).outerWidth(true)*obj.length;					
					obj.bigUl.stop(true).animate({"left":-liWidth*index},o.bigEffect.speed)
				}else if(o.bigEffect.type=="sameDirectSlide"){
					obj.flag=false;
					var liWidth=obj.bigLis.eq(0).outerWidth(true);
					var ulWidth=obj.bigLis.eq(0).outerWidth(true)*obj.length,width;				
					if(index>obj.current||index==0&&obj.current==obj.length-1){
						width=liWidth*2;
					}else if(index<=obj.current||index==obj.length-1&&obj.current==0){
						width=0;
					}
					obj.bigLis.eq(index).css({"left":width}).show();
					obj.bigUl.animate({"left":-width},o.bigEffect.speed,function(){
						obj.bigLis.not(obj.bigLis.eq(index)).hide();
						obj.bigLis.css({"left":liWidth});
						obj.bigUl.css({"left":-liWidth});
					})
				}else{				
					o.bigEffect.typeFun(obj,o);
				}
			}
			var smallEffect=function(index){
				bigEffect(index);		
				if(o.small){
					if(o.smallEffect.hoverClass){
						obj.smallLis.removeClass(o.smallEffect.hoverClass);
						obj.smallLis.eq(index).addClass(o.smallEffect.hoverClass);
					}
					if(o.smallEffect.type=="fade"){
						obj.smallLis.css("opacity",o.smallEffect.opacity);
						obj.smallLis.eq(index).stop(true,true).animate({"opacity":1},o.smallEffect.speed,function(){
							//确保只有当前缩略图具有
							obj.smallLis.not(obj.smallLis.eq(index)).css({"opacity":o.smallEffect.opacity});
							obj.smallLis.eq(index).css({"opacity":1});
						});
					}else{
						o.smallEffect.typeFun(obj,o);
					}
				}
				if(o.title){
					titleEffect(index);	
				}
			}
			var titleEffect=function(index){
				var title=obj.bigLinks.eq(index).attr("title"),
				href=obj.bigLinks.eq(index).attr("href");
				if(o.titleEffect.type=="fade"){
					obj.title.children("a").html(title.substring(0,o.titleEffect.cut)).attr("href",href).attr("title",title);
					obj.title.children("a").fadeIn(o.titleEffect.speed,function(){
						obj.title.children("a").show();
					});
				}else if(o.titleEffect.type=="slide"){
					obj.title.children("a").html(title.substring(0,o.titleEffect.cut)).attr("href",href).attr("title",title);
					var titleHeight=obj.title.outerHeight(true);
					if(parseInt(obj.title.css("top"))==0){
						obj.title.css("top",-titleHeight).stop().animate({"top":0},o.titleEffect.speed,function(){
							obj.title.css("top",0);
						});
					}else if(parseInt(obj.title.css("bottom"))==0){
						obj.title.css("bottom",-titleHeight).stop().animate({"bottom":0},o.titleEffect.speed,function(){
							obj.title.css("bottom",0);
						});
					}
				}else{
					o.titleEffect.typeFun(obj,o);
				}
			}
			var disableBtn=function(current){
				if(!o.circular){
					if(current>0&&current<obj.length-1){					
						obj.next.removeClass(o.btnDisableClass);
						obj.pre.removeClass(o.btnDisableClass);
					}else if(current==0){						
						obj.pre.addClass(o.btnDisableClass);
						obj.next.removeClass(o.btnDisableClass);
					}else if(current==obj.length-1){
						obj.pre.removeClass(o.btnDisableClass);
						obj.next.addClass(o.btnDisableClass);
					}
				}
			}
			var init=function(){
				//将常用对象复制到obj对象中，在回调函数中可直接使用
				obj.small=$(o.small,$this);//缩略图
				obj.big=$(o.big,$this);//大图
				obj.pre=$(o.pre,$this);//前一个按钮
				obj.next=$(o.next,$this);//后一个按钮
				obj.stop=$(o.stop,$this);
				obj.start=$(o.start,$this);
				obj.bigUl=$("ul",obj.big);//大图中的ul对象
				obj.bigLis=$(o.big+" li",$this);//大图中的li对象
				obj.bigLinks=$("a img",obj.bigLis).parent("a");//获取到大图中的图片链接
				obj.title=$(o.title,$this);//标题
				obj.length=obj.bigLis.length;//长度
				obj.current=o.current;//当前焦点图下标，obj.index为下一个将显示的元素下标，
				obj.flag=true;//滚动标识
				obj.stopflag=false;
				if(o.small){
					if(o.smallEffect.style=="image"){
						var smallUl=$("<ul></ul>").appendTo(obj.small);
						for(var i=0;i<obj.length;i++){
							$('<li>'+obj.bigLinks.eq(i).html()+'</li>').appendTo(smallUl);
						}
					}else if(o.smallEffect.style=="icon"){
						var smallUl=$("<ul></ul>").appendTo(obj.small);
						for(var i=0;i<obj.length;i++){
							$('<li></li>').appendTo(smallUl);
						}
					}
					obj.smallUl=$("ul",obj.small);//缩略图中ul对象
					obj.smallLis=$("li",obj.smallUl);//缩略图中li对象
					if(o.smallEffect.type=="fade"){
						obj.smallLis.css("opacity",o.smallEffect.opacity);
						obj.smallLis.eq(obj.current).css("opacity",1);
					}
					obj.smallLis.eq(obj.current).addClass(o.smallEffect.hoverClass);
				}				
				if(o.title){
					obj.title.append('<a id="" href="" title="" target="_blank"></a>');
					var title=obj.bigLinks.eq(obj.current).attr("title");
					obj.title.children("a").html(title.substring(0,o.titleEffect.cut)).attr("href",obj.bigLinks.eq(obj.current).attr("href")).attr("title",title);
				}
				if(o.bigEffect.type=="fade"){
					obj.big.css("position","relative");
					obj.bigLis.css({"position":"absolute","top":0,"left":0});
					obj.bigLis.each(function(index){
						$(this).css({"z-index":obj.length-index});
						//$(this).css({"z-index":1});
					});
					if(o.title) obj.title.css({"z-index":obj.length+1});					
					obj.pre.css({"z-index":obj.length+1});
					obj.next.css({"z-index":obj.length+1});
					if(o.small) obj.smallLis.css({"z-index":obj.length+1});
				}else if(o.bigEffect.type=="slide"){					
					var ulWidth=obj.bigLis.eq(0).outerWidth(true)*obj.length;
					if(obj.big.css("position")!="absolute"&&obj.big.css("position")!="relative"){
						obj.big.css("position","relative");
					}
					obj.bigUl.css({"position":"absolute","width":ulWidth,"left":0});					
					obj.bigLis.css({"float":"left","overflow":"hidden"});					
				}else if(o.bigEffect.type=="sameDirectSlide"){
					if(obj.big.css("position")!="absolute"&&obj.big.css("position")!="relative"){
						obj.big.css("position","relative");
					}
					var liWidth=obj.bigLis.eq(0).outerWidth(true);
					var ulWidth=obj.bigLis.eq(0).outerWidth(true)*obj.length;
					obj.bigLis.css({"position":"absolute","left":liWidth,"overflow":"hidden"});
					obj.bigUl.css({"position":"absolute","width":ulWidth,"left":-liWidth});
					obj.bigLis.not(obj.bigLis.eq(obj.current)).hide();
				}
				disableBtn(obj.current);
				if(typeof o.init == "function"){
					o.init();
				}
			}
			init();
			var bindEvent=function(){
				//缩略图事件
				if(o.small){
					obj.smallLis.each(function(index){
						var cli=$(this),event="click";
						if(o.smallEffect.onMouse){
							event="mouseover";
						}
						if(typeof o.smallEffect.mouseover =="function"){
							$(this).mouseover(function(){							
								o.smallEffect.mouseover(obj,o);
							});
						}
						if(typeof o.smallEffect.mouseout =="function"){
							$(this).mouseout(function(){							
								o.smallEffect.mouseout(obj,o);
							});
						}
						/*$("a",cli).click(function(e){
							//e.stopPropagation();
							e.preventDefault();
							//return false;
						});*/
						cli.unbind(event).bind(event,function(e){
							changePic(index);						
						});					
					});
				}
				//大图事件
				obj.bigLis.each(function(){
					var thisLi=$(this);
					if(typeof o.bigEffect.mouseover =="function"){
						thisLi.mouseover(function(e){
							o.bigEffect.mouseover(obj,o);
						});
					}
					if(typeof o.bigEffect.mouseout =="function"){
						thisLi.mouseout(function(){
							o.bigEffect.mouseout(obj,o);
						});
					}
				});
				obj.pre.click(function(){
					var index=obj.current-1;
					if(o.circular){
						if(index<0){
							index=obj.length-1;
						}
					}else{
						if(index<0){
							index=0;
						}
					}
					changePic(index);
				});
				obj.next.click(function(){
					var index=obj.current+1;
					if(o.circular){
						index=index%obj.length;
					}else{
						if(index==obj.length){
							index=obj.length-1;
						}
					}
					changePic(index);
				});
				obj.stop.click(function(){
					obj.stopflag=true;
				});
				obj.start.click(function(){
					obj.stopflag=false;
				});
			}
			bindEvent();
			var auto=function(){
				if(obj.stopflag){return;}
				obj.timer=setInterval(function(){
					var index=(obj.current+1)%obj.length;
					changePic(index);
				},o.auto+maxTime)
			}
			var	clearAuto=function(){
				$this.mouseover(function(){
					clearInterval(obj.timer);
				}).mouseout(function(){
					auto();
				});
			}
			if(o.auto){auto();clearAuto();}			
		})
	};
	$.fn.cgToTop = function(o) {
        var o=$.extend({
			range:0,//数值或者为某一个对象
			speed:200,//按钮回到指定位置的速度
			bottom:5,//按钮顶部位置
			top:null,//按钮顶部位置
			left:null,//按钮左侧位置
			right:5,//按钮右侧位置
			scrollTo:0,//0或者为某一个对象
			setPosition:true,//是否设置按钮位置
			ie6Speed:200,//ie6下位置回到原点需要的时间
			fadeSpeed:200//淡入淡出速度
		},o||{});
		var show=function($this){				
			if($(window).scrollTop()>(o.range||0)){
				$this.show();
			}else{
				$this.hide();
			}
			$(window).bind("resize scroll",function(){
				var top=$(window).scrollTop();
				o.range=typeof o.range=="number"?o.range:o.range.offset().top;	
				if(top>(o.range||0)){
					$this.fadeIn(o.fadeSpeed,function(){
						$this.show();
					});
				}else{
					$this.fadeOut(o.fadeSpeed,function(){
						$this.hide();
					});
				}				
			});
		};
		var setPosition=function($this){							
			if($.browser.msie&&$.browser.version<7){
				var width=$(window).width(),
				height=$(window).height(),
				top=$(window).scrollTop(),
				left=$(window).scrollLeft();
				$this.css({
					"position":"absolute",
					"cursor":"pointer",
					"top":o.top?o.top+top:height+top-(o.bottom||0)-$this.outerHeight(true),
					"left":o.left?o.left+left:width+left-(o.right||0)-$this.outerWidth(true)						
				});
				var ie6SetPosition=function(){
					width=$(window).width();
					height=$(window).height();
					top=$(window).scrollTop();
					left=$(window).scrollLeft();
					$this.stop().animate({
						"top":o.top?o.top+top:height+top-(o.bottom||0)-$this.outerHeight(true),
						"left":o.left?o.left+left:width+left-(o.right||0)-$this.outerWidth(true)
					},o.ie6Speed);
				}
				ie6SetPosition();
				$(window).bind("resize scroll",function(){
					ie6SetPosition();						
				});
			}else{
				$this.css({
					"position":"fixed",
					"left":o.left,
					"top":o.top,
					"right":o.right,
					"bottom":o.bottom,
					"cursor":"pointer"
				});
			}
		};
		var scrollTo=function($this){
			$this.click(function(e){
				o.scrollTo=typeof o.scrollTo=="number"?o.scrollTo:o.scrollTo.offset().top;					
				$("html,body").stop().animate({
					scrollTop:o.scrollTo
				},o.speed);						
				e.preventDefault();
			});
		}
		$(this).each(function(){			
			show($(this));
			if(o.setPosition){
				setPosition($(this));
			}			
			scrollTo($(this));			
		});
    };
	$.fn.cgDate=function(o){
		var o=$.extend(true,{
			format:"y年M月d日 w",//y：年份，M：月份，d：日，h:小时，m：分钟，s：秒；w：星期
			auto:false,
			weeks:["星期天","星期一","星期二","星期三","星期四","星期五","星期六"],
			months:[0,1,2,3,4,5,6,7,8,9,10,11]
		},o);
		this.each(function(){		
			var $this=$(this);
			var weeks=["星期天","星期一","星期二","星期三","星期四","星期五","星期六"];
			var getDateString=function(format){
				var date=new Date();
				format=format.replace("y",date.getFullYear());
				format=format.replace("M",o.months[date.getMonth()]);
				format=format.replace("d",date.getDate());
				format=format.replace("h",date.getHours()>=10?date.getHours():"0"+date.getHours());
				format=format.replace("m",date.getMinutes()>=10?date.getMinutes():"0"+date.getMinutes());
				format=format.replace("s",date.getSeconds()>=10?date.getSeconds():"0"+date.getSeconds());
				format=format.replace("w",o.weeks[date.getDay()]);
				return format;
			}
			if(o.auto){
				$this.html(getDateString(o.format));
				setInterval(function(){
					$this.html(getDateString(o.format));
				},1000);				
			}else{
				$this.html(getDateString(o.format));
			}
		});
	};
	$.fn.cgAd = function(o) {
        var o=$.extend({
			type:"random",//标识为随机漂浮或者是对联
			speed:40,//漂浮广告时的速度
			dpeed:300,//对联广告在ie6下的移动速度
			top:100,//初始顶部时的位置
			left:0,//初始左侧时的位置，如果为对联广告则标识左侧对联的左边距
			right:0,//对联广告右侧边距
			bottom:"auto",
			close:true,//广告是否可以关闭
			isLeft:true,//是否显示左侧对联，如果都为true，则左右两侧都显示，并且对联相同
			isRight:true,//是否显示右侧对联
			onMouse:true,//漂浮广告时，当鼠标移到节点上时是否停止移动
			clone:false,//是否复制原始节点，如果为true则原始节点依旧在原始位置上
			direction:1,//漂浮广告初始移动方向
			zIndex:20000,
			before:function(){},//广告开始前回调函数
			mouseover:function(){},//鼠标移到广告上时的回调函数
			mouseout:function(){},//鼠标离开广告时的回调函数
			after:function(){}//广告执行完以后的回调函数
		},o||{});
		var move=function(o){
		/*移动函数，分为四个方向，按照逆时针排序。1：右下，2：右上，3：左上，4：左下。
			方向的转移根据实际中运行轨迹进行判断。
		*/
			if(o.direction==1){//方向为1则left与top均加1
				o.currentLeft++;
				o.currentTop++;
				o.$this.css({"left":o.currentLeft,"top":o.currentTop});
				if(o.winWidth-o.objWidth<=o.currentLeft){//当达到右侧边界时，则转向4号方向
					o.direction=4;
				}
				if(o.winHeight-o.objHeight+o.documentScrollTop<=o.currentTop){//当达到下边界时则转向2号方向
					o.direction=2;
				}
			}
			if(o.direction==2){//方向为2则left++，top--
				o.currentLeft++;
				o.currentTop--;
				o.$this.css({"left":o.currentLeft,"top":o.currentTop});
				if(o.winWidth-o.objWidth<=o.currentLeft){//当达到左侧边界时则转向3号方向
					o.direction=3;
				}
				if(o.currentTop<=0){//当达到上边界时转向1号方向
					o.direction=1;
				}
			}
			if(o.direction==3){
				o.currentLeft--;
				o.currentTop--;
				o.$this.css({"left":o.currentLeft,"top":o.currentTop});
				if(o.currentLeft<=0){
					o.direction=2;
				}
				if(o.currentTop<=0){
					o.direction=4;
				}
			}
			if(o.direction==4){
				o.currentLeft--;
				o.currentTop++;
				o.$this.css({"left":o.currentLeft,"top":o.currentTop});
				if(o.currentLeft<=0){
					o.direction=1;
				}
				if(o.winHeight-o.objHeight+o.documentScrollTop<=o.currentTop){
					o.direction=3;
				}
			}
		}
		return this.each(function(){
			var $this,timer,obj={};
			obj.direction=o.direction;//设置初始移动方向
			$this=$(this);
			obj.$this=$this;
			var init=function(){//获取可视区域大小，移动元素的大小，当前位置，滚动条滚动的距离
				obj.winWidth=$(window).width();
				obj.winHeight=$(window).height();
				obj.objWidth=obj.$this.outerWidth(true);
				obj.objHeight=obj.$this.outerHeight(true);
				$("img",obj.$this).load(function(){//safari,chrome在图片未加载完成时获取不到img的宽度
					obj.objWidth=obj.$this.outerWidth(true);
					obj.objHeight=obj.$this.outerHeight(true);			
				});
				obj.currentLeft=obj.$this.offset().left;
				obj.currentTop=obj.$this.offset().top;
				obj.documentScrollTop=$("html").scrollTop();				
			}
			if(o.type=="random"){
				if(o.before){//漂浮开始时的回调函数
					o.before();
				}
				//$newthis=$this.clone();//复制当前对象，并将其插入到文档末尾
				$this.html=$this.html();
				if($this[0].tagName == "IMG"){
					$this.wrap("<div class='wrap-img'></div>");
					$this.html=$(".wrap-img",$this.parent().parent()).html();
					$this.unwrap("<div class='wrap-img'></div>");
				}
				$newthis=$('<div class="random-ad"></div>').html($this.html).css({"position":"absolute","z-index":o.zIndex}).appendTo("body");
				if(o.close){
					$('<div class="close-ad" id="leftCloseAd"></div>').appendTo($newthis).click(function(){
						$(this).parent().remove();
					});
				}
				$newthis.css({"top":o.top,"left":o.left});
				obj.$this=$newthis;//重新将复制以后的对象附加到obj对象中
				if(!o.clone){//如果不为复制元素，则将原始元素删除
					$this.remove();
				}
				var timer=setInterval(function(){
					move(obj);
				},o.speed);
				init();
				$(window).bind("resize",function(){//如果页面改变大小或者滚动则重新获取宽度大小
					init();
				}).scroll(function(){
					init();
				});
				if(o.onMouse){
					obj.$this.hover(function(){
						if(o.mouseover){
							o.mouseover();
						}
						clearInterval(timer);
					},function(){
						timer=setInterval(function(){
							if(o.mouseout){
								o.mouseout();
							}
							move(obj);
						},o.speed);
					});
				}
				if(o.after){
					o.after();
				}
			}else if(o.type=="double"){
				if(o.before){
					o.before();
				}
				var leftAd,rightAd;
				var double=function(){//复制元素到文档末尾，如果不为ie6则使用fixed，为ie6则进行处理
					$this.html=$this.html();
					if($this[0].tagName == "IMG"){
						$this.wrap("<div class='wrap-img'></div>");
						$this.html=$(".wrap-img",$this.parent().parent()).html();
						$this.unwrap("<div class='wrap-img'></div>");
					}
					if(o.isLeft) leftAd=$('<div id="leftAd" style="position:fixed;*position:absolute;z-index:'+o.zIndex+'"></div>').html($this.html).css({"top":o.top,"left":o.left,"bottom":o.bottom}).appendTo("body");
					if(o.isRight) rightAd=$('<div id="rightAd" style="position:fixed;*position:absolute;z-index:'+o.zIndex+'"></div>').html($this.html).css({"top":o.top,"right":o.right,"bottom":o.bottom}).appendTo("body");
					if(!o.clone&&(o.isRight||o.isLeft))$this.remove();
					if(o.close){
						if(o.isLeft) $('<div class="close-ad" id="leftCloseAd"></div>').appendTo(leftAd).click(function(){
							leftAd.remove();
							if(o.isRight) rightAd.remove();
						});
						if(o.isRight) $('<div class="close-ad" id="rightCloseAd"></div>').appendTo(rightAd).click(function(){
							rightAd.remove();
							if(o.isLeft) leftAd.remove();
						});
					}
				}
				double();
				if($.browser.msie&&$.browser.version<=7){//如果浏览器为ie6则处理
					$(window).scroll(function(){						
						init();
						if(o.isLeft) leftAd.stop().animate({"top":o.top+obj.documentScrollTop},o.dpeed);
						if(o.isRight) rightAd.stop().animate({"top":o.top+obj.documentScrollTop},o.dpeed);
					});
				}
				if(o.after){
					o.after();
				}
			}else if(o.type=="absolute"){
				if(o.before){
					o.before();
				}
				var leftAd,rightAd;
				var absolute=function(){//复制元素到文档末尾，如果不为ie6则使用fixed，为ie6则进行处理
					$this.html=$this.html();
					if($this[0].tagName == "IMG"){
						$this.wrap("<div class='wrap-img'></div>");
						$this.html=$(".wrap-img",$this.parent().parent()).html();
						$this.unwrap("<div class='wrap-img'></div>");
					}
					if(o.isLeft) leftAd=$('<div id="leftAd" style="position:absolute;z-index:'+o.zIndex+'"></div>').html($this.html).css({"top":o.top,"left":o.left,"bottom":o.bottom}).appendTo("body");
					if(o.isRight) rightAd=$('<div id="rightAd" style="position:absolute;z-index:'+o.zIndex+'"></div>').html($this.html).css({"top":o.top,"right":o.right,"bottom":o.bottom}).appendTo("body");
					if(!o.clone&&(o.isRight||o.isLeft))$this.remove();
					if(o.close){
						if(o.isLeft) $('<div class="close-ad" id="leftCloseAd"></div>').appendTo(leftAd).click(function(){
							leftAd.remove();
							if(o.isRight) rightAd.remove();
						});
						if(o.isRight) $('<div class="close-ad" id="rightCloseAd"></div>').appendTo(rightAd).click(function(){
							rightAd.remove();
							if(o.isLeft) leftAd.remove();
						});
					}
				}
				absolute();				
				if(o.after){
					o.after();
				}
			}
		})
    };
	$.fn.cgShowToHide=function(o){
		var o=$.extend({},{
			title:"",
			content:"",
			selectedClass:"",
			event:"click",
			type:null,//fade 淡入淡出，slide
			speed:200
		},o);
		return this.each(function(index){
			var obj={};
			obj.$this=$(this);
			obj.titles=$(o.title,obj.$this);
			obj.contents=$(o.content,obj.$this);
			obj.titles.each(function(index){
				$(this).bind(o.event,function(){
					if($(this).hasClass(o.selectedClass)){
						$(this).removeClass(o.selectedClass);
					}else{
						$(this).addClass(o.selectedClass);
					}
					if(o.type=="fade"){
						obj.contents.eq(index).fadeToggle(o.speed);
					}else if(o.type=="slide"){
						obj.contents.eq(index).slideToggle(o.speed);
					}else{
						obj.contents.eq(index).toggle(o.speed);
					}
				});
			});
		});
	};
	$.fn.cgTab=function(o){
		var o=$.extend({},{
			title:"",
			content:"",
			selectedClass:"",
			event:"click",
			current:0
		},o);
		return this.each(function(index){
			var obj={};
			obj.$this=$(this);
			obj.titles=$(o.title,obj.$this);
			obj.contents=$(o.content,obj.$this);
			obj.titles.removeClass(o.selectedClass);
			obj.contents.hide();
			obj.titles.each(function(index){
				$(this).bind(o.event,function(){
					obj.titles.removeClass(o.selectedClass);
					$(this).addClass(o.selectedClass);
					obj.contents.hide();
					obj.contents.eq(index).show();
				});
			});	
			obj.titles.eq(o.current).addClass(o.selectedClass);
			obj.contents.eq(o.current).show();
		});
	};
	$.fn.cgResize = function(o) {
        o=$.extend({
			width:null,//宽度
			height:null,//高度
			maxWidth:null//最大宽度
		},o||{});
		return this.each(function(index){
			var $this=$(this);
			var thisWidth=$this.width();
			var thisHeight=$this.height();
			var resize=function(){
				if(o.width&&o.height){//如果width与height都不为空时，则将元素赋值为固定值
					$this.width(o.width);
					$this.height(o.height);
				}else if(thisWidth>o.maxWidth){//将元素宽度设置为maxwidth大小，如果为图片则按比例进行缩放
					//if($this.attr("tagName")!="IMG"){
						$this.width(o.maxWidth);
						$this.height(parseInt(o.maxWidth*thisHeight/thisWidth));
					//}else{
					//	$this.width(o.maxWidth);
					//	$this.height(parseInt(o.maxWidth*thisHeight/thisWidth));
					//}
				}
			};
			if(thisWidth&&thisHeight){
				resize();
			}else{
				$this.load(function(){//safari,chrome在图片未加载完成时获取不到img的宽度
					thisWidth=$this.width();
					thisHeight=$this.height();
					resize();
				});
			}
		});
    };
	$.fn.cgAccordion=function(o){
		var o=$.extend({},{
			title:".accordion-title",
			content:".accordion-content",
			speed:300,
			activeClass:"accordion-selected",
			current:0,
			event:"click",
			mutil:false
		},o);
		return this.each(function(){
			var obj={};
			obj.$this=$(this);
			obj.titles=$(o.title,obj.$this);
			obj.contents=$(o.content,obj.$this);
			obj.flag=true;
			obj.titles.removeClass(o.activeClass);
			obj.contents.slideUp(0);
			obj.titles.each(function(index){
				$(this).bind(o.event,function(){
					if(!o.mutil){
						if(index!=o.current&&obj.flag){
							obj.flag=false;
							obj.titles.eq(o.current).removeClass(o.activeClass);
							$(this).addClass(o.activeClass);
							obj.contents.eq(o.current).stop().slideUp(o.speed);
							obj.contents.eq(index).stop().slideDown(o.speed,function(){
								o.current=index;
								obj.flag=true;
								obj.contents.not(obj.contents.eq(index)).stop().slideUp(0);
							});
						}
					}else{
						if($(this).hasClass(o.activeClass)){
							$(this).removeClass(o.activeClass);
							obj.contents.eq(index).stop().slideUp(o.speed);
						}else{
							$(this).addClass(o.activeClass);
							obj.contents.eq(index).stop().slideDown(o.speed);
						}
					}
				});
			});
			obj.titles.eq(o.current).addClass(o.activeClass);
			obj.contents.eq(o.current).slideDown(0);
		});
	};
})(jQuery);